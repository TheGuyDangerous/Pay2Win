name: Flutter CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env file
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" > .env
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> .env
          echo "APP_NAME=Pay2Win" >> .env
          echo "APP_VERSION=1.0.0" >> .env

      - name: Create firebase_options.dart file
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOL'
          // File generated by GitHub Actions
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          /// Default [FirebaseOptions] for use with your Firebase apps.
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                case TargetPlatform.macOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for macos - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.windows:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for windows - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.linux:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for linux - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static final FirebaseOptions web = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_WEB_API_KEY }}',
              appId: '${{ secrets.FIREBASE_WEB_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            );

            static final FirebaseOptions android = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_ANDROID_API_KEY }}',
              appId: '${{ secrets.FIREBASE_ANDROID_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            );

            static final FirebaseOptions ios = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_IOS_API_KEY }}',
              appId: '${{ secrets.FIREBASE_IOS_APP_ID }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              iosBundleId: '${{ secrets.IOS_BUNDLE_ID }}',
            );
          }
          EOL

      - name: Create google-services.json
        run: |
          cat > android/app/google-services.json << 'EOL'
          {
            "project_info": {
              "project_number": "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "storage_bucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "${{ secrets.FIREBASE_ANDROID_APP_ID }}",
                  "android_client_info": {
                    "package_name": "${{ secrets.ANDROID_PACKAGE_NAME }}"
                  }
                },
                "api_key": [
                  {
                    "current_key": "${{ secrets.FIREBASE_ANDROID_API_KEY }}"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": []
                  }
                }
              }
            ]
          }
          EOL

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --split-per-abi --release

      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: |
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-apks
          path: apks

      - name: Display structure of downloaded files
        run: ls -R apks

      # Example: Upload to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: apks/app-arm64-v8a-release.apk
          releaseNotes: |
            Changes in this build:
            - Automated build from GitHub Actions
            - Commit: ${{ github.sha }}

      # You can add additional deployment steps here (Play Store, etc.) 